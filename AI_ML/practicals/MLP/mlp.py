# -*- coding: utf-8 -*-
"""MLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_5KXJaLq1I_E2rRF88pIwoszWT8Qps8C
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, mean_absolute_error, r2_score
import time

def getData():
  # Load the dataset
  url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
  names = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
  dataset = pd.read_csv(url, names=names)

  # Replace zeros with NaN and then fill with the mean
  dataset[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = dataset[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.NaN)
  dataset.fillna(dataset.mean(), inplace=True)

  # Split the dataset into features and target
  X = dataset.drop('Outcome', axis=1)
  y = dataset['Outcome']

  # Standardize the features
  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  return X, y

def getScores(y_test, y_pred):
    # Calculate evaluation metrics
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    sensitivity = cm[1, 1] / (cm[1, 0] + cm[1, 1])
    specificity = cm[0, 0] / (cm[0, 0] + cm[0, 1])
    ppv = cm[1, 1] / (cm[0, 1] + cm[1, 1])
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    mae = mean_absolute_error(y_test, y_pred)
    mdae = np.median(np.abs(y_test - y_pred))
    r2 = r2_score(y_test, y_pred)

    return accuracy, sensitivity, specificity, ppv, rmse, mae, mdae, r2



def get_table(table):

    # Create a pandas DataFrame
    df = pd.DataFrame(table).T

    # Use pandas styling for a nice table display
    styled_df = df.style.set_table_styles(
        [{'selector': 'thead th',
          'props': [('background-color', '#4CAF50'),
                    ('color', 'white'),
                    ('font-weight', 'bold')]},
        {'selector': 'tbody tr:nth-child(odd)',
          'props': [('background-color', '#f2f2f2')]},
        {'selector': 'tbody tr:nth-child(even)',
          'props': [('background-color', '#ffffff')]},
          {'selector': 'td', 'props': [('text-align', 'left')]}]
    )

    # Display the table
    return(styled_df.hide(axis="index"))

X, y = getData()
dataset_sizes = [0.2, 0.4, 0.6, 0.8, 1.0]
results = []
results.append(['Size', 'Training Time', 'Testing Time', 'Accuracy', 'Sensitivity', 'Specificity', 'PPV', 'RMSE', 'MAE', 'MdAE', 'R2 Score'])

mlp = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000, random_state=42)

for size in dataset_sizes:
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=(0.7*size), random_state=42)

    # training time
    start_time = time.time()
    mlp.fit(X_train, y_train)
    training_time = time.time() - start_time

    # testing time
    start_time = time.time()
    y_pred = mlp.predict(X_test)
    testing_time = time.time() - start_time

    accuracy, sensitivity, specificity, ppv, rmse, mae, mdae, r2 = getScores(y_test, y_pred)

    results.append([str(size), training_time, testing_time, accuracy, sensitivity, specificity, ppv, rmse, mae, mdae, r2])
    print(f"\nResults for {int(size * 100)}% of the dataset:")
    print("----------------------------------------------------")
    print(f"Training Time: {training_time:.4f} seconds")
    print(f"Testing Time: {testing_time:.4f} seconds")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Sensitivity (Recall): {sensitivity:.4f}")
    print(f"Specificity: {specificity:.4f}")
    print(f"Positive Predictive Value (PPV): {ppv:.4f}")
    print(f"R^2 Score: {r2:.4f}")
    print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
    print(f"Mean Absolute Error (MAE): {mae:.4f}")
    print(f"Median Absolute Error (MdAE): {mdae:.4f}")
    print("----------------------------------------------------")


get_table(results)