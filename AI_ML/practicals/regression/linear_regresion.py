# -*- coding: utf-8 -*-
"""Linear_Regresion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fCCfCbA3uhQPitfO6MbWYUb0j3iOLwTs
"""

import pandas as pd
import numpy as np
import sklearn.model_selection as sk_ms
import sklearn.linear_model as sk_lm
import sklearn.metrics as sk_m
import matplotlib.pyplot as plt

class LinearRegressionModel:
    def __init__(self, data):
        # Initialize with data and split into X (independent) and Y (dependent)
        self.df       =   data
        self.X        =   self.df[['X']]
        self.Y        =   self.df['Y']
        self.X_train  =   None
        self.Y_train  =   None
        self.X_test   =   None
        self.Y_test   =   None
        self.Y_pred   =   None
        self.lr_model =   sk_lm.LinearRegression()

    # Split data into training and test sets
    def splitData(self):
        self.X_train, self.X_test, self.Y_train, self.Y_test = sk_ms.train_test_split(self.X, self.Y, test_size=0.2, random_state=42)

    def fit_line(self):
        self.lr_model.fit(self.X_train, self.Y_train)

    def predict(self):
        self.Y_pred = self.lr_model.predict(self.X_test)

    def print_coefficients(self):
        """Print the model coefficients (intercept and slope)."""
        print("Intercept:", self.lr_model.intercept_)
        print("Coefficient:", self.lr_model.coef_)

    def evaluate_model(self):
        """Evaluate the model performance."""
        mse = sk_m.mean_squared_error(self.Y_test, self.Y_pred)
        r2 = sk_m.r2_score(self.Y_test, self.Y_pred)
        print("Mean Squared Error:", mse)
        print("R-squared:", r2)

    def plot(self):
        """Plot the data points and the regression line."""
        plt.scatter(self.X, self.Y, color='blue')  # Data points
        y1 = self.lr_model.predict(self.X)
        plt.plot(self.X, y1, color='red')  # Regression line
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.title('Linear Regression')
        plt.show()

    def start(self):
      self.splitData()            # create train and test
      self.fit_line()             # using X_train, Y_train
      self.print_coefficients()   # y = mx + c
      self.predict()              # y' = m(x_test) + c
      self.evaluate_model()       # mean_sq_error(yte, y'), R_sq(yte, y')
      self.plot()

dataDic = { 'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            'Y': [2, 4, 5, 4, 5, 7, 8, 8, 10, 12]}
df = pd.DataFrame(dataDic)
obj = LinearRegressionModel(df)
obj.start()

# To evaluate the accuracy of a linear regression model, common metrics include:
          # Mean Absolute Error (MAE),
          # Mean Squared Error (MSE),
          # R-squared (coefficient of determination),
          # Root Mean Squared Error (RMSE),
          # Mean Absolute Percentage Error (MAPE).

# sklearn.model_selection
          # train_test_split()

# sklearn.linear_model.LinearRegression()
          # fit()
          # intercept_  coef_
          # predict()

# sklearn.metrics
          # mean_squared_error()
          # r2_score()

# matplotlib.pyplot
          # scatter
          # plot